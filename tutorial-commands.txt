```bash
# check if xenon cli can be found and works (should print a line about usage)
xenon

# get some help
xenon --help

# check the version (should return 2.x.x)
xenon --version

# I want to do something with files
xenon filesystem --help

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# usage line suggests I need to pick at least one from {file,ftp,sftp,webdav}
# not sure what ot do yet, let's keep it simple and ask for help on (local) 
# file manipulation
# FIXME add longer --help alternative to existing -h option for 'xenon file' 
# command (functionality seems to exist, but not included in usage line)
xenon filesystem file --help

# 'xenon filesystem file' usage line seems to suggest that I need to pick one
# from {copy,list,mkdir,remove,rename}. simplest one is probably 'list', so:
xenon filesystem file list --help
# so I need a 'path' as final argument
# TODO add examples of valid paths

# valid syntax, absolute paths
xenon file list .
xenon file list $PWD
xenon file list $HOME
xenon file list /tmp
xenon file list /tmp/
# valid, but returns error because env var is empty
xenon file list $NON_EXISTENT_ENV_VAR

# valid syntax, relative paths
xenon file list tmp
xenon file list build
xenon file list ./build
xenon file list build/install
xenon file list build/install/..

# additional options
xenon file list --hiddden .
xenon file list --recursive .
xenon file list --hidden --recursive .

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# let's try to copy a file, first make it
cd /home/daisycutter/tmp
touch testfile.txt

# check the help
xenon filesystem file --help
# so need 'copy' argument
xenon filesystem file copy --help

# first try without any optional arguments
xenon filesystem file copy testfile.txt testfile.copy.txt
# absolute paths
rm testfile.copy.txt
xenon filesystem file copy /home/daisycutter/tmp/testfile.txt /home/daisycutter/tmp/testfile.copy.txt

# try recursive copy...works
xenon filesystem file copy --recursive thedir thecopieddir
# try again:
xenon filesystem file copy --recursive thedir thecopieddir
returns an error (on the first existing path?)
# try again, with --replace option (FIXME doesn't overwrite anything, seems to ignore --replace altogether)
xenon filesystem file copy --recursive --replace thedir thecopieddir

# standard in / out
cat testfile1024.txt | xenon filesystem file copy - mystdin.txt
xenon filesystem file copy testfile1024.txt - 1> mystdout.txt

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

xenon filesystem file mkdir xenoncli-made-this-dir
xenon filesystem file mkdir --parents xenoncli-made-this-dir/thesubdir/thesubsubdir

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

xenon file copy --recursive xenoncli-made-this-dir xenoncli-copied-this-dir
xenon file rename xenoncli-copied-this-dir/ xenoncli-moved-this-dir

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

xenon file remove --recursive xenoncli-moved-this-dir/
xenon file remove xenoncli-made-this-dir/thesubdir/thesubsubdir

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 
# now we let's see if we can use schedulers, starting with slurm
# first need to bring up a 'remote' slurm
# we'll use a slurm docker container called nlesc/xenon-slurm from dockerhub
docker run --detach --publish 10022:22 nlesc/xenon-slurm:17

# use docker ps to check the state of the container
docker ps
# once the status is healthy, see if we can ssh into it as user 'xenon' with password 'javagat'
xenon -p 10022 xenon@localhost
# if that works, exit again

# let's see what help is available for slurm
xenon scheduler slurm --help

# let's first ask what queues the slurm scheduler has. need to specify location, otherwise we don't 
# know who to ask. location is any location supported by ssh or local scheduler.
xenon scheduler slurm --location ssh://xenon@localhost queues    # errors, invalid location string format I think
xenon scheduler slurm --location ssh://localhost queues          # also errors
xenon scheduler slurm --location localhost queues                # error because it tries to connect to default port 22 (should be 10022)
# check the xenon ssh --help help to find out the valid syntax for location
# FIXME help text for xenon scheduler slurm could mention ssh scheduler adaptor under --location; now only says ssh
xenon scheduler ssh --help
xenon scheduler slurm --location localhost:10022 queues          # immediately returns authentication timeout error (a bit confusing, it's not a timeout issue I think FIXME)
# we need to also provide credentials
xenon scheduler slurm --help
# so --username and --password
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 queues   # winning!
# returns:
Available queues: mypartition, otherpartition
Default queue: mypartition

# what else we got
xenon scheduler slurm --help
# listing job queues
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 list     # works, not very exciting because empty

# let's try to run an executable 
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec     # returns error of course, but FIXME does not mention --password or --username

# usage string suggests that I need to provide (the path of) an executable residing in the container. For example, /bin/hostname

xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec /bin/hostname
# returns the image id of the docker container, all good

# what about an 'ls' (/bin/ls)
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec /bin/ls
# returns the listing for the current directory (the last WORKDIR? or the place where SSH ends up? not sure)

# usage string suggests you can set the working directory:
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec --working-directory /home/xenon /bin/ls     # all good

# try other directory
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec --working-directory /home/xenon/filesystem-test-fixture /bin/ls 

# misspelled directory 
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec --working-directory /home/xenon/filesystem-test-fxture /bin/ls 
# says dir doesn't exist


# try with arguments to the executable
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec --working-directory /home/xenon/filesystem-test-fixture /bin/ls -l
# FIXME says xenon: error: unrecognized arguments: '-l'

# try with quotes
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec --working-directory /home/xenon/filesystem-test-fixture '/bin/ls -l'
# FIXME returns an error: salloc: error: Unable to exec command "/bin/ls -l"

# these two work as expected:
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec which sleep
xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec sleep 20

# not sure about difference between --max-time and --wait-timeout (their time units differ by a factor 1000*60 which is confusing; maybe reflect the units in the name of the option)

# doesn't look like --max-time does anything; could be due to how slurm is configured in the docker container:
date;xenon scheduler slurm --username xenon --password javagat --location localhost:10022 exec --max-time 1 sleep 600;date
Tue Aug  1 15:13:51 CEST 2017
Tue Aug  1 15:23:55 CEST 2017

# let's try adding some verbosity
xenon --verbose scheduler slurm --username xenon --password javagat --location localhost:10022 exec sleep 5
xenon -v scheduler slurm --username xenon --password javagat --location localhost:10022 exec sleep 5
xenon -vvvv scheduler slurm --username xenon --password javagat --location localhost:10022 exec sleep 5

```
